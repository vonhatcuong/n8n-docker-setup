#!/bin/bash

# ====================================================================
# N8N + NGROK Management Script - 2025 Edition
# ====================================================================

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_help() {
    echo -e "${BLUE}üöÄ N8N + NGROK Management Script${NC}"
    echo ""
    echo "Usage: ./manage-ngrok-n8n.sh [command]"
    echo ""
    echo "Commands:"
    echo "  start         - Kh·ªüi ƒë·ªông n8n + ngrok"
    echo "  stop          - D·ª´ng t·∫•t c·∫£ services"
    echo "  restart       - Kh·ªüi ƒë·ªông l·∫°i services"
    echo "  logs          - Xem logs"
    echo "  status        - Ki·ªÉm tra tr·∫°ng th√°i"
    echo "  ngrok-url     - L·∫•y URL ngrok hi·ªán t·∫°i"
    echo "  update-env    - C·∫≠p nh·∫≠t URL ngrok v√†o .env"
    echo "  backup        - T·∫°o backup"
    echo "  clean         - D·ªçn d·∫πp (‚ö†Ô∏è X√≥a d·ªØ li·ªáu)"
    echo "  setup         - Setup ban ƒë·∫ßu"
    echo ""
}

check_requirements() {
    if ! command -v docker &> /dev/null; then
        echo -e "${RED}‚ùå Docker kh√¥ng ƒë∆∞·ª£c c√†i ƒë·∫∑t!${NC}"
        exit 1
    fi

    if ! command -v docker-compose &> /dev/null; then
        echo -e "${RED}‚ùå Docker Compose kh√¥ng ƒë∆∞·ª£c c√†i ƒë·∫∑t!${NC}"
        exit 1
    fi

    if [ ! -f ".env" ]; then
        echo -e "${RED}‚ùå File .env kh√¥ng t·ªìn t·∫°i!${NC}"
        echo "Ch·∫°y: ./setup-ngrok-n8n.sh <your_ngrok_authtoken>"
        exit 1
    fi
}

start_services() {
    echo -e "${GREEN}üöÄ Kh·ªüi ƒë·ªông n8n + ngrok...${NC}"
    docker-compose up -d

    echo -e "${YELLOW}‚è≥ ƒê·ª£i services kh·ªüi ƒë·ªông...${NC}"
    sleep 10

    show_status
    show_access_info
}

stop_services() {
    echo -e "${YELLOW}üõë D·ª´ng t·∫•t c·∫£ services...${NC}"
    docker-compose down
    echo -e "${GREEN}‚úÖ ƒê√£ d·ª´ng t·∫•t c·∫£ services${NC}"
}

restart_services() {
    echo -e "${YELLOW}üîÑ Kh·ªüi ƒë·ªông l·∫°i services...${NC}"
    docker-compose restart

    echo -e "${YELLOW}‚è≥ ƒê·ª£i services kh·ªüi ƒë·ªông...${NC}"
    sleep 10

    show_status
}

show_logs() {
    echo -e "${BLUE}üìã Hi·ªÉn th·ªã logs (Ctrl+C ƒë·ªÉ tho√°t)...${NC}"
    docker-compose logs -f
}

show_status() {
    echo -e "${BLUE}üìä Tr·∫°ng th√°i services:${NC}"
    docker-compose ps
    echo ""

    # Ki·ªÉm tra health c·ªßa t·ª´ng service
    echo -e "${BLUE}üè• Health check:${NC}"

    # Check n8n
    if curl -s -o /dev/null -w "%{http_code}" http://localhost:5678 | grep -q "200\|401"; then
        echo -e "${GREEN}‚úÖ n8n: Running${NC}"
    else
        echo -e "${RED}‚ùå n8n: Not accessible${NC}"
    fi

    # Check ngrok
    if curl -s -o /dev/null -w "%{http_code}" http://localhost:4040 | grep -q "200"; then
        echo -e "${GREEN}‚úÖ ngrok: Running${NC}"
    else
        echo -e "${RED}‚ùå ngrok: Not accessible${NC}"
    fi

    # Check postgres
    if docker-compose exec postgres pg_isready -U postgres &> /dev/null; then
        echo -e "${GREEN}‚úÖ PostgreSQL: Running${NC}"
    else
        echo -e "${RED}‚ùå PostgreSQL: Not accessible${NC}"
    fi

    echo ""
}

get_ngrok_url() {
    echo -e "${BLUE}üåê L·∫•y URL ngrok hi·ªán t·∫°i...${NC}"

    # Th·ª≠ l·∫•y URL t·ª´ ngrok API
    NGROK_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url' 2>/dev/null || echo "")

    if [ -n "$NGROK_URL" ] && [ "$NGROK_URL" != "null" ]; then
        echo -e "${GREEN}üìç URL hi·ªán t·∫°i: $NGROK_URL${NC}"
        echo "$NGROK_URL"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Kh√¥ng th·ªÉ l·∫•y URL t·ª´ ngrok API${NC}"
        echo -e "${BLUE}üìç URL t·ª´ config: https://brief-perfect-mayfly.ngrok-free.app${NC}"
    fi
}

update_env_with_ngrok_url() {
    echo -e "${BLUE}üîÑ C·∫≠p nh·∫≠t URL ngrok v√†o .env...${NC}"

    NGROK_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url' 2>/dev/null || echo "")

    if [ -n "$NGROK_URL" ] && [ "$NGROK_URL" != "null" ]; then
        # C·∫≠p nh·∫≠t .env file
        sed -i.bak "s|NGROK_PUBLIC_URL=.*|NGROK_PUBLIC_URL=$NGROK_URL|g" .env
        sed -i.bak "s|WEBHOOK_URL=.*|WEBHOOK_URL=$NGROK_URL|g" .env
        sed -i.bak "s|N8N_HOST=.*|N8N_HOST=${NGROK_URL#https://}|g" .env

        echo -e "${GREEN}‚úÖ ƒê√£ c·∫≠p nh·∫≠t .env v·ªõi URL: $NGROK_URL${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  C·∫ßn restart n8n ƒë·ªÉ √°p d·ª•ng thay ƒë·ªïi${NC}"
    else
        echo -e "${RED}‚ùå Kh√¥ng th·ªÉ l·∫•y URL t·ª´ ngrok${NC}"
    fi
}

create_backup() {
    echo -e "${BLUE}üíæ T·∫°o backup...${NC}"
    if [ -f "backup.sh" ]; then
        ./backup.sh
    else
        echo -e "${RED}‚ùå Script backup.sh kh√¥ng t·ªìn t·∫°i${NC}"
    fi
}

clean_all() {
    echo -e "${RED}‚ö†Ô∏è  C·∫¢NH B√ÅO: Thao t√°c n√†y s·∫Ω x√≥a T·∫§T C·∫¢ d·ªØ li·ªáu!${NC}"
    echo -e "${YELLOW}Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c, Ctrl+C ƒë·ªÉ h·ªßy...${NC}"
    read

    echo -e "${YELLOW}üßπ D·ªçn d·∫πp t·∫•t c·∫£...${NC}"
    docker-compose down -v --remove-orphans
    docker system prune -f

    echo -e "${YELLOW}üóëÔ∏è  X√≥a th∆∞ m·ª•c d·ªØ li·ªáu...${NC}"
    sudo rm -rf n8n_data postgres_data

    echo -e "${GREEN}‚úÖ ƒê√£ d·ªçn d·∫πp xong${NC}"
}

show_access_info() {
    echo -e "${GREEN}üéâ Services ƒë√£ s·∫µn s√†ng!${NC}"
    echo ""
    echo -e "${BLUE}üì± Th√¥ng tin truy c·∫≠p:${NC}"
    echo -e "  üåê n8n Web: ${GREEN}https://brief-perfect-mayfly.ngrok-free.app${NC}"
    echo -e "  üë§ Username: ${GREEN}admin${NC}"
    echo -e "  üîë Password: ${GREEN}d8c60508d30dad2f642d57391cd58919${NC}"
    echo ""
    echo -e "${BLUE}üîß Debug interfaces:${NC}"
    echo -e "  üï≥Ô∏è  ngrok Web: ${GREEN}http://localhost:4040${NC}"
    echo -e "  üóÑÔ∏è  n8n Local: ${GREEN}http://localhost:5678${NC}"
    echo ""
    echo -e "${YELLOW}üí° L·ªánh h·ªØu √≠ch:${NC}"
    echo -e "  ./manage-ngrok-n8n.sh logs     - Xem logs"
    echo -e "  ./manage-ngrok-n8n.sh status   - Ki·ªÉm tra tr·∫°ng th√°i"
    echo -e "  ./manage-ngrok-n8n.sh ngrok-url - L·∫•y URL hi·ªán t·∫°i"
    echo ""
}

# Main script
case "$1" in
    start)
        check_requirements
        start_services
        ;;
    stop)
        check_requirements
        stop_services
        ;;
    restart)
        check_requirements
        restart_services
        ;;
    logs)
        check_requirements
        show_logs
        ;;
    status)
        check_requirements
        show_status
        ;;
    ngrok-url)
        get_ngrok_url
        ;;
    update-env)
        check_requirements
        update_env_with_ngrok_url
        ;;
    backup)
        check_requirements
        create_backup
        ;;
    clean)
        check_requirements
        clean_all
        ;;
    setup)
        echo "Ch·∫°y setup-ngrok-n8n.sh v·ªõi authtoken c·ªßa b·∫°n"
        ;;
    *)
        print_help
        ;;
esac